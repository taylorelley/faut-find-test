title: "Signal-Routing Troubleshooting Exercise"
overview: |
  This simulation presents a signal-routing system where every request first flows through AlphaStation, BetaHub, GammaCore and ZetaSplit.
  Dynamic signals then run through a processing cluster before reaching storage, while static signals pass two security gateways. Use the information below to identify the misbehaving device.

devices:
  - id: "AS"
    name: "AlphaStation"
    description: "Labels each incoming signal as dynamic or static, then forwards to BetaHub"
  - id: "BH"
    name: "BetaHub"
    description: "Aggregator: collects signals from AlphaStation, tags them 'ready,' sends upstream to GammaCore"
  - id: "GC"
    name: "GammaCore"
    description: "Central nexus: inspects each incoming signal and sends all traffic to ZetaSplit first"
  - id: "ZS"
    name: "ZetaSplit"
    description: "Splits dynamic signal into two identical streams for parallel processing. Static signals pass through unchanged"
  - id: "DG"
    name: "DeltaGate"
    description: "Filter: allows only 'priority-dynamic' signals through; drops non-priority dynamic. All static signals are dropped"
  - id: "EB"
    name: "EtaBalancer"
    description: "Balancer: takes signals from DeltaGate and distributes them (round-robin) to IotaCompute nodes"
  - id: "IC1"
    name: "IotaCompute 1"
    description: "Compute node: processes dynamic streams, forwards 'processed-dynamic' output to EpsilonMerge"
  - id: "IC2"
    name: "IotaCompute 2"
    description: "Compute node: processes dynamic streams, forwards 'processed-dynamic' output to EpsilonMerge"
  - id: "EM"
    name: "EpsilonMerge"
    description: "Merger: combines two 'processed-dynamic' streams into one consolidated stream and sends to KappaStore"
  - id: "KS"
    name: "KappaStore"
    description: "Storage node: holds both static assets (pure archive data) and merged dynamic results (from EM)"
  - id: "TF1"
    name: "ThetaFire-A"
    description: "Stage-1 security gateway for static traffic only. Static signals are sent here; forwards to TF2. Dynamic signals do not go to TF1"
  - id: "TF2"
    name: "ThetaFire-B"
    description: "Stage-2 security gateway for static traffic only. Performs deeper policy checks before forwarding static to KappaStore"
  - id: "LR"
    name: "LambdaRouter"
    description: "Egress node: requests tagged 'external' are sent here (irrelevant to storage)"

topology: |
  flowchart TB
      AS["🖥️ AlphaStation (AS)"]
      BH["🔀 BetaHub (BH)"]
      GC["🔹 GammaCore (GC)"]
      ZS["↗️ ZetaSplit (ZS)"]
      DG["⚠️ DeltaGate (DG)"]
      EB["⚖️ EtaBalancer (EB)"]
      IC1["⚙️ IotaCompute 1 (IC₁)"]
      IC2["⚙️ IotaCompute 2 (IC₂)"]
      EM["🔗 EpsilonMerge (EM)"]
      KS["💾 KappaStore (KS)"]
      TF1["🛡️ ThetaFire-A (TF1)"]
      TF2["🛡️ ThetaFire-B (TF2)"]
      LR["🌐 LambdaRouter (LR)"]

      %% Common Upstream:
      AS --- BH
      BH --- GC
      GC --- ZS

      %% Dynamic Path:
      ZS --- DG
      DG --- EB
      EB --- IC1
      EB --- IC2
      IC1 --- EM
      IC2 --- EM
      EM --- KS

      %% Static Path:
      ZS --- TF1
      TF1 --- TF2
      TF2 --- KS

      %% External Egress:
      GC --- LR

paths:
  - title: "Common Upstream Path"
    description: "AS → BH → GC → ZS (all traffic flows through here first)"
  - title: "Dynamic Path (Processing Cluster)"
    description: "ZS → DG → EB → IC₁ & IC₂ → EM → KS"
    note: "ZetaSplit duplicates dynamic signals; only priority-dynamic survives DeltaGate"
  - title: "Static Path (Archive)"
    description: "ZS → TF1 → TF2 → KS"
    note: "ZetaSplit passes static signals unchanged to security gateways"
  - title: "External Egress"
    description: "GC → LR (irrelevant to storage)"

test_results:
  dynamic:
    heading: "Dynamic Requests (Working)"
    details: |
      From AlphaStation (AS):
      Every request labeled "dynamic" (priority or non-priority) that should run through the dynamic pipeline (ZS→DG→EB→IC₁/IC₂→EM→KS) SUCCESS
      This confirms that priority-dynamic splitting, load-balancing, computing, merging, and final storage into KS all work correctly.
  static:
    heading: "Static Requests (Failing)"
    details: |
      From GammaCore (GC) or upstream:
      Every request labeled "static" that should follow (ZS→TF1→TF2→KS) TIMEOUT/REJECTED
      Important: No explicit "destination unreachable" message—requests simply never complete.
  ping:
    heading: "Ping/Reachability Tests (All Working)"
    results:
      - "GC → ZS"
      - "ZS → DG"
      - "DG → EB"
      - "EB → IC₁"
      - "EB → IC₂"
      - "IC₁ → EM"
      - "IC₂ → EM"
      - "EM → KS"
      - "ZS → TF1"
      - "TF1 → TF2"
      - "TF2 → KS"
      - "GC → LR"
    note: "All links and devices respond to ping—no broken cables or physical connectivity issues."

hints:
  - "Notice that both dynamic and static traffic share the same upstream path through AS→BH→GC→ZS..."
  - "All ping tests succeed, so it's not a connectivity issue anywhere in the network..."
  - "Dynamic requests work end-to-end through the entire shared path and processing cluster..."
  - "Static requests fail after ZetaSplit, but ZS→TF1 and TF1→TF2 both respond to ping..."
  - "The failure happens somewhere in the static security gateway chain, but which stage?"

validation:
  correct_answer: "TF2"
  success_feedback: "Correct! TF2 (ThetaFire-B) is indeed the faulty device. Since all pings succeed (including ZS→TF1, TF1→TF2, TF2→KS) and all dynamic requests work through the shared upstream path, the problem must be TF2's internal policy dropping all static traffic despite being reachable."
  failure_feedback: "Incorrect. The faulty device is TF2. Key insight: Dynamic requests work end-to-end through AS→BH→GC→ZS→DG→EB→IC→EM→KS, proving all those devices work. Static requests fail in the ZS→TF1→TF2→KS path, but all hops respond to ping. This points to TF2's internal filtering logic being broken."
